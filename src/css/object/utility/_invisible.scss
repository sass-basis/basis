@use "sass:map";
@use "sass:list";
@use "../../core/variable";
@use "../../core/mixin";

/*
---
name: .u-invisible
category:
  - object/utility
  - object/utility/invisible
  - object/utility/invisible/invisible
---
Invisible utility

### html
```html
<div class="u-invisible">
  Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
</div>
```
```html
<div class="u-invisible-sm">
  u-invisible-sm
</div>
```
```html
<div class="u-invisible-md">
  u-invisible-md
</div>
```
```html
<div class="u-invisible-md-down">
  u-invisible-md-down
</div>
```
```html
<div class="u-invisible-md-up">
  u-invisible-md-up
</div>
```
```html
<div class="u-invisible-lg">
  u-invisible-lg
</div>
```
```html
<div class="u-invisible-lg-down">
  u-invisible-lg-down
</div>
```
```html
<div class="u-invisible-lg-up">
  u-invisible-lg-up
</div>
```
```html
<div class="u-invisible-xl">
  u-invisible-xl
</div>
```
*/

.u-invisible {
  @include mixin.invisible();
}

$_sizes-keys: map.keys(variable.$sizes);
$_min-key: list.nth($_sizes-keys, 1);
$_max-key: list.nth($_sizes-keys, -1);
@each $size, $screen-min in variable.$sizes {
  @if $size != $_min-key and $size != $_max-key {
    .u-invisible-#{ $size }-up {
      @include mixin.media-min($size) {
        @include mixin.invisible();
      }
    }

    .u-invisible-#{ $size }-down {
      @include mixin.media-max($size) {
        @include mixin.invisible();
      }
    }
  }

  .u-invisible-#{ $size } {
    @include mixin.media-only($size) {
      @include mixin.invisible();
    }
  }
}
